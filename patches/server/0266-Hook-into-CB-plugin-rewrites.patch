From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach@zachbr.io>
Date: Wed, 3 Oct 2018 20:09:18 -0400
Subject: [PATCH] Hook into CB plugin rewrites

Allows us to do fun stuff like rewrite the OBC util fastutil location to
our own relocation. Also lets us rewrite NMS calls for when we're
debugging in an IDE pre-relocate.

diff --git a/src/main/java/org/bukkit/craftbukkit/util/Commodore.java b/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
index 5e336045e9241c056a3c68a71246d290781b8354..8adc31b3e45eff4870c701cfc2b64acaf7a1f413 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
@@ -49,6 +49,41 @@ public class Commodore
             "org/bukkit/inventory/ItemStack (I)V setTypeId"
     ) );
 
+    // Paper start - Plugin rewrites
+    private static final java.util.Map<String, String> SEARCH_AND_REMOVE = initReplacementsMap();
+    private static java.util.Map<String, String> initReplacementsMap()
+    {
+        java.util.Map<String, String> getAndRemove = new java.util.HashMap<>();
+        // Be wary of maven shade's relocations
+
+        final java.util.jar.Manifest manifest = io.papermc.paper.util.JarManifests.manifest(Commodore.class);
+        if ( Boolean.getBoolean( "debug.rewriteForIde" ) && manifest != null)
+        {
+            // unversion incoming calls for pre-relocate debug work
+            final String NMS_REVISION_PACKAGE = "v" + manifest.getMainAttributes().getValue("CraftBukkit-Package-Version") + "/";
+
+            getAndRemove.put( "org/bukkit/".concat( "craftbukkit/" + NMS_REVISION_PACKAGE ), NMS_REVISION_PACKAGE );
+        }
+
+        return getAndRemove;
+    }
+
+    @org.jetbrains.annotations.NotNull
+    private static String getOriginalOrRewrite(@org.jetbrains.annotations.NotNull String original)
+    {
+        String rewrite = null;
+        for ( java.util.Map.Entry<String, String> entry : SEARCH_AND_REMOVE.entrySet() )
+        {
+            if ( original.contains( entry.getKey() ) )
+            {
+                rewrite = original.replace( entry.getValue(), "" );
+            }
+        }
+
+        return rewrite != null ? rewrite : original;
+    }
+    // Paper end
+
     public static void main(String[] args)
     {
         OptionParser parser = new OptionParser();
@@ -133,15 +168,64 @@ public class Commodore
 
         cr.accept( new ClassVisitor( Opcodes.ASM9, cw )
         {
+            // Paper start - Rewrite plugins
+            @Override
+            public org.objectweb.asm.FieldVisitor visitField(int access, String name, String desc, String signature, Object value)
+            {
+                desc = getOriginalOrRewrite( desc );
+                if ( signature != null ) {
+                    signature = getOriginalOrRewrite( signature );
+                }
+
+                return super.visitField( access, name, desc, signature, value) ;
+            }
+            // Paper end
+
             @Override
             public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions)
             {
                 return new MethodVisitor( api, super.visitMethod( access, name, desc, signature, exceptions ) )
                 {
+                    // Paper start - Plugin rewrites
+                    @Override
+                    public void visitFrame(int type, int nLocal, Object[] local, int nStack, Object[] stack) {
+                        for ( int i = 0; i < local.length; i++ )
+                        {
+                            if ( !( local[i] instanceof String ) ) { continue; }
+
+                            local[i] = getOriginalOrRewrite( (String) local[i] );
+                        }
+
+                        for ( int i = 0; i < stack.length; i++ )
+                        {
+                            if ( !( stack[i] instanceof String ) ) { continue; }
+
+                            stack[i] = getOriginalOrRewrite( (String) stack[i] );
+                        }
+
+                        super.visitFrame( type, nLocal, local, nStack, stack );
+                    }
+
+                    @Override
+                    public void visitLocalVariable(String name, String descriptor, String signature, org.objectweb.asm.Label start, org.objectweb.asm.Label end, int index)
+                    {
+                        descriptor = getOriginalOrRewrite( descriptor );
+
+                        super.visitLocalVariable( name, descriptor, signature, start, end, index );
+                    }
+                    // Paper end
 
                     @Override
                     public void visitFieldInsn(int opcode, String owner, String name, String desc)
                     {
+                        // Paper start - Rewrite plugins
+                        owner = getOriginalOrRewrite( owner );
+                        if ( desc != null )
+                        {
+                            desc = getOriginalOrRewrite( desc );
+                        }
+                        // Paper end
+
                         if ( owner.equals( "org/bukkit/block/Biome" ) )
                         {
                             switch ( name )
@@ -489,6 +573,13 @@ public class Commodore
                             super.visitMethodInsn( opcode, owner, name, "()Lorg/bukkit/entity/TextDisplay$TextAlignment;", itf );
                             return;
                         }
+                        // Paper start - rewrite plugins
+                        owner = getOriginalOrRewrite( owner) ;
+                        if (desc != null)
+                        {
+                            desc = getOriginalOrRewrite(desc);
+                        }
+                        // Paper end
 
                         // Enums to class
                         if ( (owner.equals( "org/bukkit/block/Biome" )
@@ -503,6 +594,11 @@ public class Commodore
                                 || owner.equals( "org/bukkit/entity/Villager$Profession" ) ) && name.equals( "compareTo" ) && desc.equals( "(Ljava/lang/Enum;)I" ) )
                         {
                             super.visitMethodInsn( opcode, owner, name, "(Ljava/lang/Object;)I", itf );
+                        }
+
+                        // Paper start - Rewrite plugins
+                        if ((owner.equals("org/bukkit/OfflinePlayer") || owner.equals("org/bukkit/entity/Player")) && name.equals("getPlayerProfile") && desc.equals("()Lorg/bukkit/profile/PlayerProfile;")) {
+                            super.visitMethodInsn(opcode, owner, name, "()Lcom/destroystokyo/paper/profile/PlayerProfile;", itf);
                             return;
                         }
 
@@ -673,6 +769,13 @@ public class Commodore
                     @Override
                     public void visitLdcInsn(Object value)
                     {
+                        // Paper start
+                        if (value instanceof Type type) {
+                            if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {
+                                value = Type.getType(getOriginalOrRewrite(type.getDescriptor()));
+                            }
+                        }
+                        // Paper end
                         if ( value instanceof String && ( (String) value ).equals( "com.mysql.jdbc.Driver" ) )
                         {
                             super.visitLdcInsn( "com.mysql.cj.jdbc.Driver" );
@@ -685,6 +788,7 @@ public class Commodore
                     @Override
                     public void visitTypeInsn( int opcode, String type )
                     {
+                        type = getOriginalOrRewrite( type );
                         // Need to also change class type when changing the creation of a new Object
                         // Fore more info see org.bukkit.craftbukkit.legacy.ImposterEnumMap
                         if ( enumCompatibility && Opcodes.NEW == opcode && type.equals( "java/util/EnumMap" ) )
@@ -698,6 +802,13 @@ public class Commodore
                     @Override
                     public void visitInvokeDynamicInsn( String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments )
                     {
+                        // Paper start - Rewrite plugins
+                        name = getOriginalOrRewrite( name );
+                        if ( descriptor != null )
+                        {
+                            descriptor = getOriginalOrRewrite( descriptor );
+                        }
+                        // Paper end
                         // Handle lambda expression
                         if ( enumCompatibility )
                         {
