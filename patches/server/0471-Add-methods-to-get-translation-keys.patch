From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 11 Aug 2020 19:16:09 +0200
Subject: [PATCH] Add methods to get translation keys

== AT ==
public org.bukkit.craftbukkit.inventory.CraftMetaFirework
public org.bukkit.craftbukkit.inventory.CraftMetaFirework getNBT(Lorg/bukkit/FireworkEffect$Type;)I

Co-authored-by: MeFisto94 <MeFisto94@users.noreply.github.com>

diff --git a/src/main/java/org/bukkit/craftbukkit/CraftMaterial.java b/src/main/java/org/bukkit/craftbukkit/CraftMaterial.java
index 89d9bdb8752bd3aac73664464463b96a85a756b7..d90441aa2b111659668c04bfe556bf3584e94052 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftMaterial.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftMaterial.java
@@ -384,4 +384,11 @@ public class CraftMaterial<B extends BlockData> implements BlockType<B>, ItemTyp
             return keySet.stream().iterator();
         }
     }
+
+    // Paper start - translation
+    @Override
+    public String translationKey() {
+        return this.item.getDescriptionId();
+    }
+    // Paper end - translation
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
index 82e1d36c4f7124a7f193412aeee3c68422886e7b..0fe05e03ec8f81772621d6bd881893d22467f2e2 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
@@ -73,4 +73,11 @@ public class CraftAttribute extends Attribute {
     public int hashCode() {
         return this.getKey().hashCode();
     }
+
+    // Paper start - translation
+    @Override
+    public String translationKey() {
+        return "attribute.name." + this.key.value();
+    }
+    // Paper end - translation
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
index 6ec380ecc625dc4b367e78302e81c7e18c44962f..b58517c511e050b12fc6f629d3705a7c14fa7b07 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
@@ -124,4 +124,11 @@ public class CraftBiome extends Biome {
             return Stream.concat(super.values(), Stream.of(get(CraftBiomeRegistry.CUSTOM)));
         }
     }
+
+    // Paper start - translation
+    @Override
+    public String translationKey() {
+        return "biome.minecraft." + this.key.value();
+    }
+    // Paper end - translation
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 59c4dd9e0b8861c7603f4f419ddce62f47f9ceb4..c702710659bd70c2335345ab6963e39d4fe14cbd 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -667,5 +667,10 @@ public class CraftBlock implements Block {
     public org.bukkit.SoundGroup getBlockSoundGroup() {
         return org.bukkit.craftbukkit.CraftSoundGroup.getSoundGroup(this.getNMS().getSoundType());
     }
+
+    @Override
+    public String translationKey() {
+        return this.getNMS().getBlock().getDescriptionId();
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java
index a4a867218a34643f4ba278a93681d41485d1c276..ee9493d40753bba51adc1f9ae729401c05587827 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java
@@ -271,4 +271,11 @@ public class CraftBlockType<B extends BlockData> implements BlockType<B> {
     public int hashCode() {
         return this.getKey().hashCode();
     }
+
+    // Paper start - translation
+    @Override
+    public String translationKey() {
+        return this.block.getDescriptionId();
+    }
+    // Paper end - translation
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 10a4bd0b1150d18931a31e1549a23f6ed9c4b814..4b9f6aaa680020388e8ffd0dcbc66ec47ad3c91a 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -127,6 +127,11 @@ public class CraftEnchantment extends Enchantment {
     public net.kyori.adventure.text.Component displayName(int level) {
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().getFullname(level));
     }
+
+    @Override
+    public String translationKey() {
+        return this.target.getDescriptionId();
+    }
     // Paper end
 
     public net.minecraft.world.item.enchantment.Enchantment getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
index eadeb5da2e3b0a358743011cb90a3da7263cb3d8..29f9f11151bfc38c774dfcdf1d603d70bac54b5d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
@@ -278,4 +278,11 @@ public class CraftEntityType extends EntityType {
             return Stream.concat(super.values(), Stream.of(get(CraftEntityTypeRegistry.UNKNOWN)));
         }
     }
+
+    // Paper start - translation
+    @Override
+    public String translationKey() {
+        return this.getHandle().getDescriptionId();
+    }
+    // Paper end - translation
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 9358865615f3639313a323f0806da0280994e426..49aa1da8ad4778dd2bf53819ad6fc5058d74a685 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -320,6 +320,13 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
         public int hashCode() {
             return this.getKey().hashCode();
         }
+
+        // Paper start - translation
+        @Override
+        public String translationKey() {
+            return "entity.minecraft.villager." + this.key.value();
+        }
+        // Paper end - translation
     }
 
     // Paper start - Add villager reputation API
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
index 80212e5c58229664a7f97819197126efa8f48cae..fdf33146ac74480cb7c037309a213d355579b986 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
@@ -277,4 +277,10 @@ public class CraftItemType implements ItemType {
         return this.getKey().equals(((CraftItemType) other).getKey());
     }
 
+    // Paper start - translation
+    @Override
+    public String translationKey() {
+        return this.item.getDescriptionId();
+    }
+    // Paper end - translation
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacyMaterial.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacyMaterial.java
index b633aac9980f3eb372e6f313b4fd0d386391714c..33bfda5b5257529c24fdc66e96637702c361af64 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacyMaterial.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacyMaterial.java
@@ -983,4 +983,11 @@ public class CraftLegacyMaterial implements Material {
     public int hashCode() {
         return this.id;
     }
+
+    // Paper start - translation
+    @Override
+    public String translationKey() {
+        throw new IllegalArgumentException("Cannot get translation key of Legacy Material");
+    }
+    // Paper end - translation
 }
diff --git a/src/test/java/io/papermc/paper/world/TranslationKeyTest.java b/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
index fab3063fffa959ac7f0eb5937f2fae94d11b6591..a6c4c93c1856ebd47c7a5ec1a6a17956719bda97 100644
--- a/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
+++ b/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
@@ -1,12 +1,23 @@
 package io.papermc.paper.world;
 
 import com.destroystokyo.paper.ClientOption;
+import java.util.Map;
+import net.minecraft.network.chat.contents.TranslatableContents;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.world.entity.player.ChatVisiblity;
+import net.minecraft.world.level.GameType;
+import net.minecraft.world.level.biome.Biome;
 import org.bukkit.Difficulty;
+import org.bukkit.FireworkEffect;
+import org.bukkit.GameMode;
+import org.bukkit.GameRule;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.support.AbstractTestingBase;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
-public class TranslationKeyTest {
+public class TranslationKeyTest extends AbstractTestingBase {
 
     @Test
     public void testChatVisibilityKeys() {
@@ -15,4 +26,58 @@ public class TranslationKeyTest {
             Assert.assertEquals(chatVisibility + "'s translation key doesn't match", ChatVisiblity.valueOf(chatVisibility.name()).getKey(), chatVisibility.translationKey());
         }
     }
+
+    @Test
+    public void testDifficultyKeys() {
+        for (Difficulty bukkitDifficulty : Difficulty.values()) {
+            Assert.assertEquals(bukkitDifficulty + "'s translation key doesn't match", ((TranslatableContents) net.minecraft.world.Difficulty.byId(bukkitDifficulty.ordinal()).getDisplayName().getContents()).getKey(), bukkitDifficulty.translationKey());
+        }
+    }
+
+    @Test
+    public void testGameruleKeys() {
+        for (GameRule<?> rule : GameRule.values()) {
+            Assert.assertEquals(rule.getName() + "'s translation doesn't match", org.bukkit.craftbukkit.CraftWorld.getGameRulesNMS().get(rule.getName()).getDescriptionId(), rule.translationKey());
+        }
+    }
+
+    @Test
+    public void testAttributeKeys() {
+        for (Attribute attribute : Attribute.values()) {
+            Assert.assertEquals("translation key mismatch for " + attribute, org.bukkit.craftbukkit.attribute.CraftAttributeMap.toMinecraft(net.minecraft.core.registries.BuiltInRegistries.ATTRIBUTE, attribute).getDescriptionId(), attribute.translationKey());
+        }
+    }
+
+    @Test
+    public void testFireworkEffectType() {
+        for (FireworkEffect.Type type : FireworkEffect.Type.values()) {
+            Assert.assertEquals("translation key mismatch for " + type, net.minecraft.world.item.FireworkRocketItem.Shape.byId(org.bukkit.craftbukkit.inventory.CraftMetaFirework.getNBT(type)).getName(), org.bukkit.FireworkEffect.Type.NAMES.key(type));
+        }
+    }
+
+    @Test
+    @Ignore // TODO fix
+    public void testCreativeCategory() {
+        // for (CreativeModeTab tab : CreativeModeTabs.tabs()) {
+        //     CreativeCategory category = Objects.requireNonNull(CraftCreativeCategory.fromNMS(tab));
+        //     Assert.assertEquals("translation key mismatch for " + category, ((TranslatableContents) tab.getDisplayName().getContents()).getKey(), category.translationKey());
+        // }
+    }
+
+    @Test
+    public void testGameMode() {
+        for (GameType nms : GameType.values()) {
+            GameMode bukkit = GameMode.getByValue(nms.getId());
+            Assert.assertNotNull(bukkit);
+            Assert.assertEquals("translation key mismatch for " + bukkit, ((TranslatableContents) nms.getLongDisplayName().getContents()).getKey(), bukkit.translationKey());
+        }
+    }
+
+    @Test
+    public void testBiome() {
+        for (Map.Entry<ResourceKey<Biome>, Biome> nms : AbstractTestingBase.BIOMES.entrySet()) {
+            org.bukkit.block.Biome bukkit = org.bukkit.block.Biome.valueOf(nms.getKey().location().getPath().toUpperCase());
+            Assert.assertEquals("translation key mismatch for " + bukkit, nms.getKey().location().toLanguageKey("biome"), bukkit.translationKey());
+        }
+    }
 }
