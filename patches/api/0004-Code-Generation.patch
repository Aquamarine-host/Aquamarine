From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Fri, 26 May 2023 18:14:44 -0700
Subject: [PATCH] Code Generation

Currently includes generated key holder classes for types
used in the Registry Modification API

diff --git a/build.gradle.kts b/build.gradle.kts
index 97ba0ab8e268ba2f937143aaa5b68ea6f6cbfb88..435326b6918ecc8ab63f7ff59b2c92da1ee86da1 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -105,3 +105,15 @@ tasks.check {
     dependsOn(scanJar)
 }
 // Paper end
+// Paper start
+// TODO uncomment once paperweight is updated to include this task type
+// val scanJarForOldGeneratedCode = tasks.register("scanJarForOldGeneratedCode", io.papermc.paperweight.tasks.ScanJarForOldGeneratedCode::class) {
+//     mcVersion.set(providers.gradleProperty("mcVersion"))
+//     annotation.set("Lio/papermc/paper/generated/GeneratedFrom;")
+//     jarToScan.set(tasks.jar.flatMap { it.archiveFile })
+//     classpath.from(configurations.compileClasspath)
+// }
+// tasks.check {
+//     dependsOn(scanJarForOldGeneratedCode)
+// }
+// Paper end
diff --git a/src/main/java/io/papermc/paper/generated/GameEventKeys.java b/src/main/java/io/papermc/paper/generated/GameEventKeys.java
new file mode 100644
index 0000000000000000000000000000000000000000..7c9edea063156e20fbca23dd9a8c28280e37b13c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/generated/GameEventKeys.java
@@ -0,0 +1,259 @@
+package io.papermc.paper.generated;
+
+import io.papermc.paper.registry.TypedKey;
+import net.kyori.adventure.key.Key;
+import org.bukkit.GameEvent;
+import org.intellij.lang.annotations.Subst;
+
+/**
+ * Vanilla GameEvent keys
+ */
+@GeneratedFrom("1.19.4")
+public final class GameEventKeys {
+    /**
+     * GameEvent key: {@code minecraft:entity_mount}
+     */
+    public static final TypedKey<GameEvent> ENTITY_MOUNT = create("entity_mount");
+
+    /**
+     * GameEvent key: {@code minecraft:block_activate}
+     */
+    public static final TypedKey<GameEvent> BLOCK_ACTIVATE = create("block_activate");
+
+    /**
+     * GameEvent key: {@code minecraft:block_destroy}
+     */
+    public static final TypedKey<GameEvent> BLOCK_DESTROY = create("block_destroy");
+
+    /**
+     * GameEvent key: {@code minecraft:container_close}
+     */
+    public static final TypedKey<GameEvent> CONTAINER_CLOSE = create("container_close");
+
+    /**
+     * GameEvent key: {@code minecraft:note_block_play}
+     */
+    public static final TypedKey<GameEvent> NOTE_BLOCK_PLAY = create("note_block_play");
+
+    /**
+     * GameEvent key: {@code minecraft:shear}
+     */
+    public static final TypedKey<GameEvent> SHEAR = create("shear");
+
+    /**
+     * GameEvent key: {@code minecraft:lightning_strike}
+     */
+    public static final TypedKey<GameEvent> LIGHTNING_STRIKE = create("lightning_strike");
+
+    /**
+     * GameEvent key: {@code minecraft:block_place}
+     */
+    public static final TypedKey<GameEvent> BLOCK_PLACE = create("block_place");
+
+    /**
+     * GameEvent key: {@code minecraft:entity_place}
+     */
+    public static final TypedKey<GameEvent> ENTITY_PLACE = create("entity_place");
+
+    /**
+     * GameEvent key: {@code minecraft:prime_fuse}
+     */
+    public static final TypedKey<GameEvent> PRIME_FUSE = create("prime_fuse");
+
+    /**
+     * GameEvent key: {@code minecraft:entity_roar}
+     */
+    public static final TypedKey<GameEvent> ENTITY_ROAR = create("entity_roar");
+
+    /**
+     * GameEvent key: {@code minecraft:hit_ground}
+     */
+    public static final TypedKey<GameEvent> HIT_GROUND = create("hit_ground");
+
+    /**
+     * GameEvent key: {@code minecraft:drink}
+     */
+    public static final TypedKey<GameEvent> DRINK = create("drink");
+
+    /**
+     * GameEvent key: {@code minecraft:item_interact_finish}
+     */
+    public static final TypedKey<GameEvent> ITEM_INTERACT_FINISH = create("item_interact_finish");
+
+    /**
+     * GameEvent key: {@code minecraft:block_open}
+     */
+    public static final TypedKey<GameEvent> BLOCK_OPEN = create("block_open");
+
+    /**
+     * GameEvent key: {@code minecraft:elytra_glide}
+     */
+    public static final TypedKey<GameEvent> ELYTRA_GLIDE = create("elytra_glide");
+
+    /**
+     * GameEvent key: {@code minecraft:jukebox_play}
+     */
+    public static final TypedKey<GameEvent> JUKEBOX_PLAY = create("jukebox_play");
+
+    /**
+     * GameEvent key: {@code minecraft:block_change}
+     */
+    public static final TypedKey<GameEvent> BLOCK_CHANGE = create("block_change");
+
+    /**
+     * GameEvent key: {@code minecraft:instrument_play}
+     */
+    public static final TypedKey<GameEvent> INSTRUMENT_PLAY = create("instrument_play");
+
+    /**
+     * GameEvent key: {@code minecraft:jukebox_stop_play}
+     */
+    public static final TypedKey<GameEvent> JUKEBOX_STOP_PLAY = create("jukebox_stop_play");
+
+    /**
+     * GameEvent key: {@code minecraft:shriek}
+     */
+    public static final TypedKey<GameEvent> SHRIEK = create("shriek");
+
+    /**
+     * GameEvent key: {@code minecraft:eat}
+     */
+    public static final TypedKey<GameEvent> EAT = create("eat");
+
+    /**
+     * GameEvent key: {@code minecraft:entity_damage}
+     */
+    public static final TypedKey<GameEvent> ENTITY_DAMAGE = create("entity_damage");
+
+    /**
+     * GameEvent key: {@code minecraft:entity_shake}
+     */
+    public static final TypedKey<GameEvent> ENTITY_SHAKE = create("entity_shake");
+
+    /**
+     * GameEvent key: {@code minecraft:explode}
+     */
+    public static final TypedKey<GameEvent> EXPLODE = create("explode");
+
+    /**
+     * GameEvent key: {@code minecraft:dispense_fail}
+     */
+    public static final TypedKey<GameEvent> DISPENSE_FAIL = create("dispense_fail");
+
+    /**
+     * GameEvent key: {@code minecraft:piston_extend}
+     */
+    public static final TypedKey<GameEvent> PISTON_EXTEND = create("piston_extend");
+
+    /**
+     * GameEvent key: {@code minecraft:teleport}
+     */
+    public static final TypedKey<GameEvent> TELEPORT = create("teleport");
+
+    /**
+     * GameEvent key: {@code minecraft:block_attach}
+     */
+    public static final TypedKey<GameEvent> BLOCK_ATTACH = create("block_attach");
+
+    /**
+     * GameEvent key: {@code minecraft:entity_interact}
+     */
+    public static final TypedKey<GameEvent> ENTITY_INTERACT = create("entity_interact");
+
+    /**
+     * GameEvent key: {@code minecraft:projectile_shoot}
+     */
+    public static final TypedKey<GameEvent> PROJECTILE_SHOOT = create("projectile_shoot");
+
+    /**
+     * GameEvent key: {@code minecraft:entity_die}
+     */
+    public static final TypedKey<GameEvent> ENTITY_DIE = create("entity_die");
+
+    /**
+     * GameEvent key: {@code minecraft:entity_dismount}
+     */
+    public static final TypedKey<GameEvent> ENTITY_DISMOUNT = create("entity_dismount");
+
+    /**
+     * GameEvent key: {@code minecraft:flap}
+     */
+    public static final TypedKey<GameEvent> FLAP = create("flap");
+
+    /**
+     * GameEvent key: {@code minecraft:block_detach}
+     */
+    public static final TypedKey<GameEvent> BLOCK_DETACH = create("block_detach");
+
+    /**
+     * GameEvent key: {@code minecraft:projectile_land}
+     */
+    public static final TypedKey<GameEvent> PROJECTILE_LAND = create("projectile_land");
+
+    /**
+     * GameEvent key: {@code minecraft:sculk_sensor_tendrils_clicking}
+     */
+    public static final TypedKey<GameEvent> SCULK_SENSOR_TENDRILS_CLICKING = create("sculk_sensor_tendrils_clicking");
+
+    /**
+     * GameEvent key: {@code minecraft:block_close}
+     */
+    public static final TypedKey<GameEvent> BLOCK_CLOSE = create("block_close");
+
+    /**
+     * GameEvent key: {@code minecraft:block_deactivate}
+     */
+    public static final TypedKey<GameEvent> BLOCK_DEACTIVATE = create("block_deactivate");
+
+    /**
+     * GameEvent key: {@code minecraft:item_interact_start}
+     */
+    public static final TypedKey<GameEvent> ITEM_INTERACT_START = create("item_interact_start");
+
+    /**
+     * GameEvent key: {@code minecraft:splash}
+     */
+    public static final TypedKey<GameEvent> SPLASH = create("splash");
+
+    /**
+     * GameEvent key: {@code minecraft:fluid_place}
+     */
+    public static final TypedKey<GameEvent> FLUID_PLACE = create("fluid_place");
+
+    /**
+     * GameEvent key: {@code minecraft:container_open}
+     */
+    public static final TypedKey<GameEvent> CONTAINER_OPEN = create("container_open");
+
+    /**
+     * GameEvent key: {@code minecraft:fluid_pickup}
+     */
+    public static final TypedKey<GameEvent> FLUID_PICKUP = create("fluid_pickup");
+
+    /**
+     * GameEvent key: {@code minecraft:equip}
+     */
+    public static final TypedKey<GameEvent> EQUIP = create("equip");
+
+    /**
+     * GameEvent key: {@code minecraft:step}
+     */
+    public static final TypedKey<GameEvent> STEP = create("step");
+
+    /**
+     * GameEvent key: {@code minecraft:swim}
+     */
+    public static final TypedKey<GameEvent> SWIM = create("swim");
+
+    /**
+     * GameEvent key: {@code minecraft:piston_contract}
+     */
+    public static final TypedKey<GameEvent> PISTON_CONTRACT = create("piston_contract");
+
+    private GameEventKeys() {
+    }
+
+    public static TypedKey<GameEvent> create(@Subst("some_key") final String key) {
+        return TypedKey.create(Key.key(key)/*, RegistryKey.GAME_EVENT */);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/generated/GeneratedFrom.java b/src/main/java/io/papermc/paper/generated/GeneratedFrom.java
new file mode 100644
index 0000000000000000000000000000000000000000..87325f75e258717fef01ff5fee4dde7ae6fd8cd2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/generated/GeneratedFrom.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.generated;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * Used to mark classes which are generated from
+ * a specific version of minecraft.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@interface GeneratedFrom {
+
+    String value();
+}
diff --git a/src/main/java/io/papermc/paper/registry/TypedKey.java b/src/main/java/io/papermc/paper/registry/TypedKey.java
new file mode 100644
index 0000000000000000000000000000000000000000..273a96dae8ad0fccdeec6e3f3262a18a73697fc3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/TypedKey.java
@@ -0,0 +1,19 @@
+package io.papermc.paper.registry;
+
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+public interface TypedKey<T extends Keyed> extends Keyed {
+
+    @Override
+    @NotNull Key key();
+
+    // @NotNull RegistryKey<T> registryKey();
+
+    @ApiStatus.Internal
+    static <T extends Keyed> @NotNull TypedKey<T> create(@NotNull Key key/* , @NotNull RegistryKey<T> registryKey */) {
+        return new TypedKeyImpl<>(key/* , registryKey */);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/TypedKeyImpl.java b/src/main/java/io/papermc/paper/registry/TypedKeyImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..7ab075b86ad5b8f49b4ae5d5ef19bdb069a9b822
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/TypedKeyImpl.java
@@ -0,0 +1,7 @@
+package io.papermc.paper.registry;
+
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+
+record TypedKeyImpl<T extends Keyed>(Key key /*, RegistryKey<T> registryKey */) implements TypedKey<T> {
+}
