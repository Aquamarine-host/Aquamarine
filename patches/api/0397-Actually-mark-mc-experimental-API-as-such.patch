From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 8 Dec 2022 17:31:21 -0800
Subject: [PATCH] Actually mark mc experimental API as such

upstream has inconsistent and incomplete
minecraft experimental annotations

diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index aa01426cc51198bb99f1934ff63083f64547bf00..f574f7d9b699a8aa04adc5ea0897bb3fdfea6f7b 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -183,6 +183,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material STRIPPED_MANGROVE_WOOD = getMaterial("stripped_mangrove_wood");
     Material STRIPPED_CRIMSON_HYPHAE = getMaterial("stripped_crimson_hyphae");
     Material STRIPPED_WARPED_HYPHAE = getMaterial("stripped_warped_hyphae");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material STRIPPED_BAMBOO_BLOCK = getMaterial("stripped_bamboo_block");
     Material OAK_WOOD = getMaterial("oak_wood");
     Material SPRUCE_WOOD = getMaterial("spruce_wood");
@@ -356,6 +358,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material CHERRY_FENCE = getMaterial("cherry_fence");
     Material DARK_OAK_FENCE = getMaterial("dark_oak_fence");
     Material MANGROVE_FENCE = getMaterial("mangrove_fence");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_FENCE = getMaterial("bamboo_fence");
     Material CRIMSON_FENCE = getMaterial("crimson_fence");
     Material WARPED_FENCE = getMaterial("warped_fence");
@@ -735,6 +739,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material CHERRY_BUTTON = getMaterial("cherry_button");
     Material DARK_OAK_BUTTON = getMaterial("dark_oak_button");
     Material MANGROVE_BUTTON = getMaterial("mangrove_button");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_BUTTON = getMaterial("bamboo_button");
     Material CRIMSON_BUTTON = getMaterial("crimson_button");
     Material WARPED_BUTTON = getMaterial("warped_button");
@@ -752,6 +758,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material CHERRY_PRESSURE_PLATE = getMaterial("cherry_pressure_plate");
     Material DARK_OAK_PRESSURE_PLATE = getMaterial("dark_oak_pressure_plate");
     Material MANGROVE_PRESSURE_PLATE = getMaterial("mangrove_pressure_plate");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_PRESSURE_PLATE = getMaterial("bamboo_pressure_plate");
     Material CRIMSON_PRESSURE_PLATE = getMaterial("crimson_pressure_plate");
     Material WARPED_PRESSURE_PLATE = getMaterial("warped_pressure_plate");
@@ -766,6 +774,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material CHERRY_DOOR = getMaterial("cherry_door");
     Material DARK_OAK_DOOR = getMaterial("dark_oak_door");
     Material MANGROVE_DOOR = getMaterial("mangrove_door");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_DOOR = getMaterial("bamboo_door");
     Material CRIMSON_DOOR = getMaterial("crimson_door");
     Material WARPED_DOOR = getMaterial("warped_door");
@@ -780,6 +790,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material CHERRY_TRAPDOOR = getMaterial("cherry_trapdoor");
     Material DARK_OAK_TRAPDOOR = getMaterial("dark_oak_trapdoor");
     Material MANGROVE_TRAPDOOR = getMaterial("mangrove_trapdoor");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_TRAPDOOR = getMaterial("bamboo_trapdoor");
     Material CRIMSON_TRAPDOOR = getMaterial("crimson_trapdoor");
     Material WARPED_TRAPDOOR = getMaterial("warped_trapdoor");
@@ -793,6 +805,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material CHERRY_FENCE_GATE = getMaterial("cherry_fence_gate");
     Material DARK_OAK_FENCE_GATE = getMaterial("dark_oak_fence_gate");
     Material MANGROVE_FENCE_GATE = getMaterial("mangrove_fence_gate");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_FENCE_GATE = getMaterial("bamboo_fence_gate");
     Material CRIMSON_FENCE_GATE = getMaterial("crimson_fence_gate");
     Material WARPED_FENCE_GATE = getMaterial("warped_fence_gate");
@@ -829,7 +843,11 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material DARK_OAK_CHEST_BOAT = getMaterial("dark_oak_chest_boat");
     Material MANGROVE_BOAT = getMaterial("mangrove_boat");
     Material MANGROVE_CHEST_BOAT = getMaterial("mangrove_chest_boat");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_RAFT = getMaterial("bamboo_raft");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_CHEST_RAFT = getMaterial("bamboo_chest_raft");
     Material STRUCTURE_BLOCK = getMaterial("structure_block");
     Material JIGSAW = getMaterial("jigsaw");
@@ -933,6 +951,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material CHERRY_SIGN = getMaterial("cherry_sign");
     Material DARK_OAK_SIGN = getMaterial("dark_oak_sign");
     Material MANGROVE_SIGN = getMaterial("mangrove_sign");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_SIGN = getMaterial("bamboo_sign");
     Material CRIMSON_SIGN = getMaterial("crimson_sign");
     Material WARPED_SIGN = getMaterial("warped_sign");
@@ -1386,6 +1406,8 @@ public interface Material extends Keyed, Comparable<Material>, Translatable, net
     Material JUNGLE_WALL_SIGN = getMaterial("jungle_wall_sign");
     Material DARK_OAK_WALL_SIGN = getMaterial("dark_oak_wall_sign");
     Material MANGROVE_WALL_SIGN = getMaterial("mangrove_wall_sign");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Material BAMBOO_WALL_SIGN = getMaterial("bamboo_wall_sign");
     Material OAK_WALL_HANGING_SIGN = getMaterial("oak_wall_hanging_sign");
     Material SPRUCE_WALL_HANGING_SIGN = getMaterial("spruce_wall_hanging_sign");
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
index 76d387ffc18d54525a09f792c31420cc5bfecfb2..20598ce6c00e47c976c195fed7b5d36a6275418d 100644
--- a/src/main/java/org/bukkit/Sound.java
+++ b/src/main/java/org/bukkit/Sound.java
@@ -113,20 +113,50 @@ public abstract class Sound extends OldEnum<Sound> implements Keyed, net.kyori.a
     public static final Sound BLOCK_BAMBOO_SAPLING_BREAK = getSound("block.bamboo_sapling.break");
     public static final Sound BLOCK_BAMBOO_SAPLING_HIT = getSound("block.bamboo_sapling.hit");
     public static final Sound BLOCK_BAMBOO_SAPLING_PLACE = getSound("block.bamboo_sapling.place");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_BREAK = getSound("block.bamboo_wood.break");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_FALL = getSound("block.bamboo_wood.fall");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_HIT = getSound("block.bamboo_wood.hit");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_PLACE = getSound("block.bamboo_wood.place");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_STEP = getSound("block.bamboo_wood.step");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_DOOR_CLOSE = getSound("block.bamboo_wood_door.close");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_DOOR_OPEN = getSound("block.bamboo_wood_door.open");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE = getSound("block.bamboo_wood_trapdoor.close");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN = getSound("block.bamboo_wood_trapdoor.open");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF = getSound("block.bamboo_wood_button.click_off");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON = getSound("block.bamboo_wood_button.click_on");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF = getSound("block.bamboo_wood_pressure_plate.click_off");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON = getSound("block.bamboo_wood_pressure_plate.click_on");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE = getSound("block.bamboo_wood_fence_gate.close");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN = getSound("block.bamboo_wood_fence_gate.open");
     public static final Sound BLOCK_BARREL_CLOSE = getSound("block.barrel.close");
     public static final Sound BLOCK_BARREL_OPEN = getSound("block.barrel.open");
@@ -727,10 +757,20 @@ public abstract class Sound extends OldEnum<Sound> implements Keyed, net.kyori.a
     public static final Sound BLOCK_HANGING_ROOTS_HIT = getSound("block.hanging_roots.hit");
     public static final Sound BLOCK_HANGING_ROOTS_PLACE = getSound("block.hanging_roots.place");
     public static final Sound BLOCK_HANGING_ROOTS_STEP = getSound("block.hanging_roots.step");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_HANGING_SIGN_STEP = getSound("block.hanging_sign.step");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_HANGING_SIGN_BREAK = getSound("block.hanging_sign.break");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_HANGING_SIGN_FALL = getSound("block.hanging_sign.fall");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_HANGING_SIGN_HIT = getSound("block.hanging_sign.hit");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_HANGING_SIGN_PLACE = getSound("block.hanging_sign.place");
     public static final Sound BLOCK_NETHER_WOOD_HANGING_SIGN_STEP = getSound("block.nether_wood_hanging_sign.step");
     public static final Sound BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK = getSound("block.nether_wood_hanging_sign.break");
@@ -1063,11 +1103,23 @@ public abstract class Sound extends OldEnum<Sound> implements Keyed, net.kyori.a
     public static final Sound BLOCK_NOTE_BLOCK_DIDGERIDOO = getSound("block.note_block.didgeridoo");
     public static final Sound BLOCK_NOTE_BLOCK_BIT = getSound("block.note_block.bit");
     public static final Sound BLOCK_NOTE_BLOCK_BANJO = getSound("block.note_block.banjo");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE = getSound("block.note_block.imitate.zombie");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_NOTE_BLOCK_IMITATE_SKELETON = getSound("block.note_block.imitate.skeleton");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_NOTE_BLOCK_IMITATE_CREEPER = getSound("block.note_block.imitate.creeper");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON = getSound("block.note_block.imitate.ender_dragon");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON = getSound("block.note_block.imitate.wither_skeleton");
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     public static final Sound BLOCK_NOTE_BLOCK_IMITATE_PIGLIN = getSound("block.note_block.imitate.piglin");
     public static final Sound ENTITY_OCELOT_HURT = getSound("entity.ocelot.hurt");
     public static final Sound ENTITY_OCELOT_AMBIENT = getSound("entity.ocelot.ambient");
diff --git a/src/main/java/org/bukkit/Tag.java b/src/main/java/org/bukkit/Tag.java
index e8206aa4cb574ee629f375a85acf597ae164a1c3..30f9e5e28edd5c267cc1ddef4aa5eac1bdc14a36 100644
--- a/src/main/java/org/bukkit/Tag.java
+++ b/src/main/java/org/bukkit/Tag.java
@@ -149,6 +149,8 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla block tag representing all bamboo blocks.
      */
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Tag<Material> BAMBOO_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("bamboo_blocks"), Material.class);
     /**
      * Vanilla block tag representing all banner blocks.
@@ -768,6 +770,8 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla item tag representing all books that may be placed on bookshelves.
      */
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Tag<Material> ITEMS_BOOKSHELF_BOOKS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("bookshelf_books"), Material.class);
     /**
      * Vanilla item tag representing all items that may be placed in beacons.
@@ -788,6 +792,8 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla item tag representing all hanging signs.
      */
+    @MinecraftExperimental // Paper
+    @ApiStatus.Experimental // Paper
     Tag<Material> ITEMS_HANGING_SIGNS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("hanging_signs"), Material.class);
     /**
      * Vanilla item tag representing all items which will ignite creepers when
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
index b821fa535b23fe5af5884e536b1708460076ee40..a8e631315f2da68895a258cf0ba9875bc88fc48c 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java
@@ -138,6 +138,8 @@ public enum InventoryType {
     /**
      * Pseudo chiseled bookshelf inventory, with 6 slots of undefined type.
      */
+    @MinecraftExperimental // Paper
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHISELED_BOOKSHELF(6, "Chiseled Bookshelf", false),
     /**
      * Pseudo jukebox inventory with 1 slot of undefined type.
@@ -149,6 +151,7 @@ public enum InventoryType {
      * @apiNote draft, experimental 1.20 API
      */
     @MinecraftExperimental
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SMITHING_NEW(4, "Upgrade Gear"),
     ;
 
diff --git a/src/main/java/org/bukkit/inventory/SmithingTransformRecipe.java b/src/main/java/org/bukkit/inventory/SmithingTransformRecipe.java
index 08fd3eca8383cdc2d06c3ce973e8c402d279077e..999e60a4a0f20fe4bbf5d8eefbafe368b80d1c4d 100644
--- a/src/main/java/org/bukkit/inventory/SmithingTransformRecipe.java
+++ b/src/main/java/org/bukkit/inventory/SmithingTransformRecipe.java
@@ -6,6 +6,8 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Represents a smithing transform recipe.
  */
+@org.bukkit.MinecraftExperimental // Paper
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public class SmithingTransformRecipe extends SmithingRecipe {
 
     private final RecipeChoice template;
